% setting attribute values
function obj = set(obj, varargin)
  % A) Specify fieldnames <-> types key/value pairs
  typestruct = struct(...
                'value_mc', 'special' , ...
                'value_stress', 'special' , ...
                'value_base', 'numeric' , ...
                'exposure_base', 'numeric' , ...
                'exposure_stress', 'special' , ...
                'exposure_mc', 'special' , ...
                'timestep_mc', 'special' , ...
                'name', 'char' , ...
                'id', 'char' , ...
                'sub_type', 'char' , ...
                'valuation_date', 'date' , ...
                'asset_class', 'char' , ...
                'currency', 'char' , ...
                'description', 'char' , ...
                'type', 'char', ...
                'spot_value', 'numeric', ...
                'quantile_base', 'numeric', ...
                'stochastic_riskfactor', 'char' , ...
                'stochastic_curvee', 'char', ...
                'stochastic_rf_type', 'char', ...   
                'region_id', 'cell', ...
				'rating_id', 'cell', ...
				'style_id', 'cell', ...
				'duration_id', 'cell', ...
				'region_values', 'numeric', ... 
				'liquidity_class', 'char' , ...
				'country_id', 'cell', ...
				'country_values', 'numeric', ...
				'esg_score', 'numeric', ...
				'YYYREPLACEINSTRUMENTATTRIBUTEYYY', 'char' , ...
				'issuer', 'char' , ...
				'counterparty', 'char' , ...
				'XXXREPLACEINSTRUMENTATTRIBUTEXXX', 'char' , ...
				'designated_sponsor', 'char' , ...
				'market_maker', 'char' , ...
				'custodian_bank_underlyings', 'char' , ...
				'country_of_origin', 'char' , ...
				'fund_replication', 'char' , ...
				'style_values', 'numeric', ... 
				'rating_values', 'numeric', ...
				'duration_values', 'numeric', ...              
                't_degree_freedom', 'numeric'...
               );
  % B) store values in object
  if (length (varargin) < 2 || rem (length (varargin), 2) ~= 0)
    error ('set: expecting property/value pairs');
  end
  
  while (length (varargin) > 1)
    prop = varargin{1};
    prop = lower(prop);
    val = varargin{2};
    varargin(1:2) = [];
    % check, if property is an existing field
    if (sum(strcmpi(prop,fieldnames(typestruct)))==0)
        fprintf('set: not an allowed fieldname >>%s<< with value >>%s<< :\n',prop,any2str(val));
        fieldnames(typestruct)
        error ('set: invalid property of %s class: >>%s<<\n',class(obj),prop);
    end
    % get property type:
    type = typestruct.(prop);
    % input checks and validation
    retval = return_checked_input(obj,val,prop,type);
    % store property in object
    obj.(prop) = retval;
  end
end   
